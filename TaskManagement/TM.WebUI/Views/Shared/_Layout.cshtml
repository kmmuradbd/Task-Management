@using TM.Infrastructure;
@using System.Threading;
@{
    TMIdentity identity = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - SG</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="/images/favicon.png" type="image/x-icon" rel="shortcut icon" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap" rel="stylesheet">
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <style>
        .bc, .heading,
        input:checked + .switch-box,
        .rule input:checked + .rule-box,
        .common-btn,
        .datepicker td.active,
        .datepicker td.active.active,
        .dataTables_paginate a:hover,
        .dataTables_paginate a.current,
        .gender input:checked + .rule-box,
        .identification input:checked + .rule-box,
        .checkbox input:checked ~ .checkmark {
            background-color: #0874bb;
        }

        .rule input:checked + .rule-box, .gender input:checked + .rule-box,
        .identification input:checked + .rule-box,
        .checkbox input:checked ~ .checkmark {
            border-color: #0874bb;
        }

        .pc,
        .navbar ul li a,
        .organisation-info h2 strong,
        .datepicker th.switch,
        .widget-head-title,
        .notify-inner ul li div a,
        .common-table thead th {
            color: #0874bb
        }
    </style>
</head>
<body>
    <header class="header">
        <nav class="navbar navbar-common">
            <div class="container-fluid">
                <a class="navbar-brand" href="inde.html">
                    <img src="images/logo.png" alt="">
                </a>
                <button class="navbar-toggler">
                    <span class="navbar-icon"></span>
                    <span class="navbar-icon"></span>
                    <span class="navbar-icon"></span>
                </button>

                <div class="navbar-collapse">
                    <ul class="navbar-nav">
                        @{
                            if (Session["menu"] != null)
                            {
                                var data = Session["menu"] as List<TM.Service.ViewModel.MasterMenuViewModel>;
                                if (data != null)
                                {
                                    foreach (var item in data.Where(w => w.ParentId == 0))
                                    {
                                        if (item.Id == 1)
                                        {
                                            <li><a href="/Home"><img src="images/home.svg" alt=""> Dashboard</a></li>
                                        }
                                        else
                                        {
                                            <li>
                                                <a href="#"><img src="@item.Icon" alt=""> @item.Name</a>
                                                @{
                                                    var menulist = data.Where(w => w.ParentId == item.Id).ToList();
                                                    if (menulist.Count > 0)
                                                    {
                                                        <ul>
                                                            @foreach (var submenu in menulist)
                                                            {
                                                                <li><a href="@submenu.URL">@submenu.Name</a></li>
                                                            }
                                                        </ul>
                                                    }
                                                }
                                            </li>
                                        }
                                    }
                                }
                            }
                        }

                    </ul>
                    <ul>
                        <li><a class="notify-btn" href="javascript:void();"><img src="images/bell.svg" alt=""> <span>5</span> </a></li>
                        <li>
                            @{
                                try
                                {
                                    identity = (TMIdentity)Thread.CurrentPrincipal.Identity;
                                    if (identity != null)
                                    {
                                        <a href="#">  @identity.Name</a>
                                        <ul>
                                            <li><a href="/Login/ChangePassword">Change Password</a></li>
                                            <li><a href="/Login/Logout">Logout</a></li>
                                        </ul>
                                    }
                                    else
                                    {
                                        HttpContext.Current.Response.Redirect("/Home");
                                    }
                                }
                                catch
                                {
                                    HttpContext.Current.Response.Redirect("/Home");
                                }
                            }
                        </li>
                    </ul>
                </div>

            </div>
        </nav>
    </header>
    <div class="heading">
        <h3>Dashboard</h3>
    </div>

    <main class="main">
        @RenderBody()
    </main>
    <footer class="footer">
        <div>Powered by <a href="https://softwaregaze.com/" target="_blank"><img src="~/images/logo.png" alt=""></a></div>
        <ul>
            <li>
                <a href="#">FAQ</a>
            </li>
            <li>
                <a href="#">Terms of use</a>
            </li>
            <li>
                <a href="#">Privacy policy</a>
            </li>
        </ul>
    </footer>
    <div class="notify">
        <div class="notify-close"></div>
        <div class="notify-inner">
            <ul>
                <li>
                    <div>New Policy Created by <a href="#">01779878433</a>, <a href="#">Khan Zahan</a></div>
                    <a href="#" class="common-btn">APPROVE</a>
                </li>
                <li>
                    <div>New Claim by <a href="#">01989723232</a> Approve Need</div>
                    <a href="#" class="common-btn">APPROVE</a>
                </li>
                <li>
                    <div>New Policy Created by <a href="#">01779878433</a>, <a href="#">Khan Zahan</a></div>
                </li>
            </ul>
            <a href="#">Clear All</a>
        </div>
        <div class="notify-overlay"></div>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
    <script src="js/jquery-3.2.1.min.js"></script>
    <script src="js/jquery.nicescroll.min.js"></script>
    <script src="js/datepicker.js"></script>
    <script src="js/scripts.js"></script>
    <script src="https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript">
        $('.notify-btn,.notify-close,.notify-overlay').on('click', function (e) {
            $('body').toggleClass('in');
            $('.notify').toggleClass('notify-in');
            e.stopPropagation();
        });
        $(".notify-inner").on('click', function (e) {
            e.stopPropagation();
        });
    </script>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script>
        $(document).ready(function () {
            $('#example').DataTable();
        });
        Highcharts.chart('domains-list', {
            chart: {
                type: 'bar'
            },
            title: {
                text: ''
            },
            xAxis: {
                categories: ['Facebook', 'Youtube', 'Instagram', 'Espncricinfo', 'Twitter'],
                title: {
                    text: null
                }
            },

            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true
                    }
                }
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'top',
                x: -40,
                y: 80,
                floating: true,
                borderWidth: 1,
                backgroundColor: ((Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'),
                shadow: true
            },
            credits: {
                enabled: false
            },
            colors: ['#4746AD'],
            // series: [{
            //     data: [30000, 15000, 12000, 9000, 4000],
            //     showInLegend: false,
            //     color: 'green'
            // }]
            series: [{
                showInLegend: false,
                data: [{
                    y: 30000,
                    color: '#1dd1a1'
                }, {
                    y: 15000,
                    color: '#5f27cd'
                },
                {
                    y: 12000,
                    color: '#2e86de'
                },
                {
                    y: 9000,
                    color: '#01a3a4'
                },
                {
                    y: 4000,
                    color: '#ee5253'
                }
                ]
            }]

        });

        Highcharts.chart('container2', {
            chart: {
                type: 'column'
            },
            title: {
                text: '658 Total'
            },
            xAxis: {
                categories: ['Facebook', 'Youtube', 'Instagram', 'Espncricinfo', 'Twitter'],
                title: {
                    text: null
                }
            },

            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true
                    }
                }
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'top',
                x: -40,
                y: 80,
                floating: true,
                borderWidth: 1,
                backgroundColor: ((Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'),
                shadow: true
            },
            credits: {
                enabled: false
            },
            colors: ['#4746AD'],
            series: [{
                showInLegend: false,
                data: [{
                    y: 35000,
                    color: '#1dd1a1'
                }, {
                    y: 25000,
                    color: '#5f27cd'
                },
                {
                    y: 20000,
                    color: '#2e86de'
                },
                {
                    y: 15000,
                    color: '#01a3a4'
                },
                {
                    y: 10000,
                    color: '#ee5253'
                }
                ]
            }]
        });

        // Make monochrome colors
        var pieColors = (function () {
            var colors = [],
                base = '#9A99E1',
                i;

            for (i = 0; i < 10; i += 1) {
                // Start out with a darkened base color (negative brighten), and end
                // up with a much brighter color
                colors.push(Highcharts.Color(base).brighten((i - 3) / 7).get());
            }
            return colors;
        }());

        // Build the chart
        Highcharts.chart('onBoard', {
            chart: {
                type: 'pie',
                events: {
                    load: function () {
                        var chart = this;
                        var width = chart.plotWidth;
                        var height = chart.plotHeight;

                        // Add text in the center
                        chart.renderer.text(
                            '28873<br><span style="font-size:12px;color:#666">Total</span>',
                            chart.plotLeft + width / 2,
                            chart.plotTop + height / 2
                        ).css({
                            color: '#000',
                            fontSize: '18px',
                            textAlign: 'center'
                        }).attr({
                            align: 'center',
                            zIndex: 5
                        }).add();
                    }
                }
            },
            title: {
                text: null
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            plotOptions: {
                pie: {
                    innerSize: '60%', // donut hole
                    dataLabels: {
                        enabled: true,
                        format: '<b>{point.name}</b><br>{point.percentage:.1f} %',
                        distance: -50,
                        filter: {
                            property: 'percentage',
                            operator: '>',
                            value: 3
                        }
                    }
                }
            },
            credits: {
                enabled: false
            },
            series: [{
                name: 'OnBoard',
                data: [
                    { name: 'Pending', y: 50.41, color: "#341f97" },
                    { name: 'Settle', y: 21.84, color: "#10ac84" },
                    { name: 'Cancel', y: 15.05, color: "#ee5253" }
                ]
            }]
        });




    </script>
</body>
</html>
